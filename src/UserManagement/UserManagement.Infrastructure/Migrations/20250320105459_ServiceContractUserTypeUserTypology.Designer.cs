// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserManagement.Infrastructure;

#nullable disable

namespace UserManagement.Infrastructure.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20250320105459_ServiceContractUserTypeUserTypology")]
    partial class ServiceContractUserTypeUserTypology
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IntegrationEventLog.EventLock", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LockedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("EventLock", (string)null);
                });

            modelBuilder.Entity("IntegrationEventLog.IntegrationEventLogEntry", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("TimesSent")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId");

                    b.ToTable("IntegrationEventLog", (string)null);
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Cohabitant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CohabitantTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ResidenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CohabitantTypeId");

                    b.HasIndex("ResidenceId");

                    b.ToTable("Cohabitant");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Masters.CohabitantType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CohabitantType");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Masters.KeyStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("KeyStatus");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Masters.ServiceContractStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Default")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Default")
                        .IsUnique()
                        .HasFilter("[Default] = 1");

                    b.ToTable("ServiceContractStatus");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Masters.ServiceContractStatusReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ServiceContractStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceContractStatusId");

                    b.ToTable("ServiceContractStatusReason");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Masters.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Residence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArchitecturalBarrierEntrance")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ArchitecturalBarriereResidence")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Concierge")
                        .HasColumnType("bit");

                    b.Property<bool>("Doorman")
                        .HasColumnType("bit");

                    b.Property<bool>("Electricity")
                        .HasColumnType("bit");

                    b.Property<bool>("Elevator")
                        .HasColumnType("bit");

                    b.Property<bool>("FireHydrant")
                        .HasColumnType("bit");

                    b.Property<bool>("Gas")
                        .HasColumnType("bit");

                    b.Property<bool>("Internet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrentResidence")
                        .HasColumnType("bit");

                    b.Property<string>("Observation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ServiceContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Water")
                        .HasColumnType("bit");

                    b.Property<bool>("Wifi")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ServiceContractId", "IsCurrentResidence")
                        .IsUnique()
                        .HasFilter("[IsCurrentResidence] = 1");

                    b.ToTable("Residence");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.ServiceContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTypologyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStatusId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("UserTypeId");

                    b.HasIndex("UserTypologyId");

                    b.HasIndex("WorkCenterId");

                    b.HasIndex("UserId", "WorkCenterId")
                        .IsUnique();

                    b.ToTable("ServiceContract");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.ServiceContractStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceContractStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceContractStatusReasonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceContractId");

                    b.HasIndex("ServiceContractStatusId");

                    b.HasIndex("ServiceContractStatusReasonId");

                    b.ToTable("ServiceContractStatusHistory");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.AllergyImpact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AllergyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reaction")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("SeverityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AllergyId");

                    b.HasIndex("MedicalInformationId");

                    b.HasIndex("SeverityId");

                    b.ToTable("AllergyImpact");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.HealthCoverage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalInformationId");

                    b.ToTable("HealthCoverage");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Identification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Identification");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Allergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.AllergySeverity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AllergySeverity");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Animal");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.CivilStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CivilStatus");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.DependencyDegree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DependencyDegree");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Disease");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.IdentificationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("IdentificationType");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.MedicalConditionStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MedicalConditionStatus");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Sex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Sex");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.MedicalCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DiagnosedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicalInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("MedicalInformationId");

                    b.HasIndex("StatusId");

                    b.ToTable("MedicalCondition");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.MedicalInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhysicalScale")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PsychologicalScale")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SensoryCharacteristics")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SocialScale")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalInformation");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Medication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dosage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("MedicalInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Recurrence")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalInformationId");

                    b.HasIndex("MedicineId");

                    b.ToTable("Medication");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.PreferredProfessional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Surname2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalId")
                        .IsUnique();

                    b.ToTable("PreferredProfessional");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Appellative")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CivilStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CongratulateOnBirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("DependencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdentificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicalInformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observation")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("PreferredProfessionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SexId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Surname1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CivilStatusId");

                    b.HasIndex("DependencyId");

                    b.HasIndex("EducationId");

                    b.HasIndex("IdentificationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MedicalInformationId");

                    b.HasIndex("PreferredProfessionalId");

                    b.HasIndex("SexId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.UserAnimal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnimal");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.UserHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ServiceContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserHistory");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.UserResidence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ResidenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserResidence");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.WorkCenterAggregate.UserType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("WorkCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.WorkCenterAggregate.UserTypology", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("WorkCenterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserTypology");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.WorkCenterAggregate.WorkCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WorkCenter");
                });

            modelBuilder.Entity("UserManagement.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ClientRequest");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Cohabitant", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Masters.CohabitantType", "CohabitantType")
                        .WithMany()
                        .HasForeignKey("CohabitantTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Residence", "Residence")
                        .WithMany("Cohabitants")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("UserManagement.Domain.ValueObjects.PhoneNumbers", "PhoneNumbers", b1 =>
                        {
                            b1.Property<Guid>("CohabitantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("MobilePhone")
                                .HasMaxLength(9)
                                .HasColumnType("nvarchar(9)");

                            b1.HasKey("CohabitantId");

                            b1.ToTable("Cohabitant");

                            b1.WithOwner()
                                .HasForeignKey("CohabitantId");
                        });

                    b.Navigation("CohabitantType");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Residence");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Masters.ServiceContractStatusReason", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Masters.ServiceContractStatus", "ServiceContractStatus")
                        .WithMany()
                        .HasForeignKey("ServiceContractStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ServiceContractStatus");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Residence", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.ServiceContract", "ServiceContract")
                        .WithMany("Residences")
                        .HasForeignKey("ServiceContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("UserManagement.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ResidenceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Door")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Floor")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<decimal?>("Latitude")
                                .HasColumnType("decimal(9,6)");

                            b1.Property<decimal?>("Longitude")
                                .HasColumnType("decimal(9,6)");

                            b1.Property<string>("Number")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("Province")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RoadType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Stair")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Town")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("ResidenceId");

                            b1.ToTable("Residence");

                            b1.WithOwner()
                                .HasForeignKey("ResidenceId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ServiceContract");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.ServiceContract", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Masters.ServiceContractStatus", "CurrentStatus")
                        .WithMany()
                        .HasForeignKey("CurrentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Masters.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.WorkCenterAggregate.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.WorkCenterAggregate.UserTypology", "UserTypology")
                        .WithMany()
                        .HasForeignKey("UserTypologyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.WorkCenterAggregate.WorkCenter", "WorkCenter")
                        .WithMany()
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentStatus");

                    b.Navigation("ServiceType");

                    b.Navigation("User");

                    b.Navigation("UserType");

                    b.Navigation("UserTypology");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.ServiceContractStatusHistory", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.ServiceContract", "ServiceContract")
                        .WithMany("ServiceContractStatusHistories")
                        .HasForeignKey("ServiceContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Masters.ServiceContractStatus", "ServiceContractStatus")
                        .WithMany()
                        .HasForeignKey("ServiceContractStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Masters.ServiceContractStatusReason", "ServiceContractStatusReason")
                        .WithMany()
                        .HasForeignKey("ServiceContractStatusReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ServiceContract");

                    b.Navigation("ServiceContractStatus");

                    b.Navigation("ServiceContractStatusReason");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.AllergyImpact", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Allergy", "Allergy")
                        .WithMany()
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.MedicalInformation", "MedicalInformation")
                        .WithMany("AllergyImpacts")
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.AllergySeverity", "Severity")
                        .WithMany()
                        .HasForeignKey("SeverityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Allergy");

                    b.Navigation("MedicalInformation");

                    b.Navigation("Severity");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.HealthCoverage", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.MedicalInformation", "MedicalInformation")
                        .WithMany("HealthCoverages")
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalInformation");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Identification", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.IdentificationType", "IdentificationType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdentificationType");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.MedicalCondition", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.MedicalInformation", "MedicalInformation")
                        .WithMany("MedicalConditions")
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.MedicalConditionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Disease");

                    b.Navigation("MedicalInformation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.Medication", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.MedicalInformation", "MedicalInformation")
                        .WithMany("Medications")
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicalInformation");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.CivilStatus", "CivilStatus")
                        .WithMany()
                        .HasForeignKey("CivilStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.DependencyDegree", "Dependency")
                        .WithMany()
                        .HasForeignKey("DependencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Identification", "Identification")
                        .WithMany()
                        .HasForeignKey("IdentificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.MedicalInformation", "MedicalInformation")
                        .WithMany()
                        .HasForeignKey("MedicalInformationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.PreferredProfessional", "PreferredProfessional")
                        .WithMany()
                        .HasForeignKey("PreferredProfessionalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Sex", "Sex")
                        .WithMany()
                        .HasForeignKey("SexId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("UserManagement.Domain.ValueObjects.PhoneNumbers", "PhoneNumbers", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("HomePhone")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MobilePhone")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("UserManagement.Domain.ValueObjects.CallTime", "CallTime", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("CallTime");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("UserManagement.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("CallTime");

                    b.Navigation("CivilStatus");

                    b.Navigation("Dependency");

                    b.Navigation("Education");

                    b.Navigation("Email");

                    b.Navigation("Identification");

                    b.Navigation("Language");

                    b.Navigation("MedicalInformation");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("PreferredProfessional");

                    b.Navigation("Sex");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.UserAnimal", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.Masters.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.User", null)
                        .WithMany("UserAnimals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.UserHistory", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.User", null)
                        .WithMany("UserHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.UserResidence", b =>
                {
                    b.HasOne("UserManagement.Domain.AggregatesModel.UserAggregate.User", null)
                        .WithMany("UserResidences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.Residence", b =>
                {
                    b.Navigation("Cohabitants");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.ServiceContractAggregate.ServiceContract", b =>
                {
                    b.Navigation("Residences");

                    b.Navigation("ServiceContractStatusHistories");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.MedicalInformation", b =>
                {
                    b.Navigation("AllergyImpacts");

                    b.Navigation("HealthCoverages");

                    b.Navigation("MedicalConditions");

                    b.Navigation("Medications");
                });

            modelBuilder.Entity("UserManagement.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.Navigation("UserAnimals");

                    b.Navigation("UserHistories");

                    b.Navigation("UserResidences");
                });
#pragma warning restore 612, 618
        }
    }
}
